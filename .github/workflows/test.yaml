name: Terraform CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Use GitHub OIDC to authenticate with AWS
permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    env:
      AWS_REGION: ${{ secrets.AWS_REGION || 'ap-south-1' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::199570228070:role/oidc-demo-role
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive
      
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      # Remove the manual Setup Node.js if only used for terraform-docs.
      # The terraform-docs action itself doesn't require Node.js directly.
      # If you have other Node.js-based tools, keep it.
      # - name: Setup Node.js
      #   if: github.event_name == 'pull_request'
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '18'

      # REMOVE THIS STEP:
      # - name: Install terraform-docs
      #   if: github.event_name == 'pull_request'
      #   run: |
      #     curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
      #     tar -xzf terraform-docs.tar.gz
      #     chmod +x terraform-docs
      #     sudo mv terraform-docs /usr/local/bin/
      
      - name: Generate Terraform Docs and Commit
        if: github.event_name == 'pull_request'
        # --- REPLACED WITH terraform-docs/gh-actions ---
        uses: terraform-docs/gh-actions@v1.3.0 # Use the official action
        with:
          output-file: README.md             # The file to generate
          output-method: inject              # How to write to the file
          config-file: .terraform-docs.yml   # Your config file
          git-push: true                     # Have the action push the changes directly
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Required for git-push

      # REMOVE THESE GIT CONFIG AND PUSH STEPS FOR README.md, as terraform-docs/gh-actions handles it:
      # - name: Configure Git
      #   if: github.event_name == 'pull_request'
      #   run: |
      #     git config --local user.email "vnagaraj984@gmail.com"
      #     git config --local user.name "nag9844"
      # - name: Commit README.md
      #   if: github.event_name == 'pull_request'
      #   run: |
      #     # This part is now handled by git-push: true in terraform-docs/gh-actions
      #     git add README.md
      #     if [ -n "$(git status --porcelain README.md)" ]; then
      #       echo "README.md changed, committing."
      #       git commit -m "docs: Update README.md"
      #     else
      #       echo "README.md is up to date."
      #     fi
          
      - name: Terraform Plan and Commit
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          # Git user config is sticky per run, no need to set again here if terraform-docs action set it
          # If terraform-docs action is not used, you'd need to set user.email/name here again.
          # For consistency, it's good to set it once before any commits.
          git config --local user.email "vnagaraj984@gmail.com"
          git config --local user.name "nag9844"

          terraform plan -no-color -input=false > plan.txt
          
          if [ -n "$(git status --porcelain plan.txt)" ]; then
            echo "plan.txt changed, committing."
            git add plan.txt
            git commit -m "chore: Update plan.txt"
          else
            echo "plan.txt is up to date."
          fi

      # The 'Push generated changes' step will now only push the plan.txt changes,
      # as terraform-docs/gh-actions already pushed README.md
      - name: Push generated plan.txt changes
        if: github.event_name == 'pull_request'
        run: |
          echo "Checking Git status before push:"
          git status
          echo "Listing untracked files (if any):"
          git clean -n -d

          # Check if there are any local commits to push (from plan.txt)
          # We don't need `git add .` before this check if we expect only plan.txt to be pending
          # And we don't need `git pull --rebase` here, as the terraform-docs action would have handled that
          # for its push, and `git push` itself can do a fast-forward merge if possible.
          
          # This check determines if there are local commits not yet on remote.
          # It's specifically for commits generated by this job's `git commit -m "chore: Update plan.txt"`
          if ! git diff --quiet origin/${{ github.head_ref }}; then
            echo "Local commits detected (for plan.txt). Performing push."
            # Simpler push, assuming the terraform-docs action has already handled its push
            # and potentially a rebase if needed for its changes.
            git push origin HEAD:${{ github.head_ref }}
          else
            echo "No new local commits from this workflow to push."
          fi
      
      - name: Update Pull Request Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN_OUTPUT: ${{ steps.plan.outputs.stdout }} # This will be empty, read from file instead
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let planContent = '';
            try {
              planContent = fs.readFileSync('plan.txt', 'utf8');
            } catch (error) {
              console.log('plan.txt not found, possibly no changes or plan failed.');
              planContent = 'No plan output available or plan failed to generate.';
            }

            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`hcl
            ${planContent}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false