name: Terraform CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Use GitHub OIDC to authenticate with AWS
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  # lint-and-security:
  #   name: Lint and Security Checks
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Install TFLint
  #       run: |
  #         wget https://github.com/terraform-linters/tflint/releases/download/v0.50.2/tflint_linux_amd64.zip
  #         unzip tflint_linux_amd64.zip
  #         sudo mv tflint /usr/local/bin/
  #         tflint --version

  #     - name: Run TFLint
  #       run: tflint --init && tflint -f compact
  #       working-directory: ./
      
  #     - name: Install Checkov
  #       run: pip install checkov

  #     - name: Run Checkov with soft fail
  #       run: checkov --directory . --soft-fail

  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION || 'ap-south-1' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        # with:
        #   terraform_version: 1.6.6
        #   cli_config_credentials_token: ${{ secrets.GITHUBTOKEN }}
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::199570228070:role/oidc-demo-role
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive
      
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: Setup Node.js
        if: github.event_name == 'pull_request'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install terraform-docs
        if: github.event_name == 'pull_request'
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/
      
      - name: Generate Terraform Docs
        if: github.event_name == 'pull_request'
        run: |
          terraform-docs .
          git config --local user.email "vnagaraj984@gmail.com"
          git config --local user.name "nag9844"
          git add README.md
          git diff --quiet && git diff --staged --quiet || git commit -m "docs: Update README.md"
      
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          terraform plan -no-color -input=false > plan.txt
          git add plan.txt
          git diff --quiet && git diff --staged --quiet || git commit -m "chore: Update plan.txt"
      
      - name: Push changes
        if: github.event_name == 'pull_request'
        run: git push origin HEAD:${{ github.head_ref }}
      
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false