name: Terraform CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Use GitHub OIDC to authenticate with AWS
permissions:
  id-token: write
  contents: write           # Keep write for this job
  pull-requests: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    permissions:
      contents: write        # Grant write permission specifically for this job
      pull-requests: write
      id-token: write

    env:
      AWS_REGION: ${{ secrets.AWS_REGION || 'ap-south-1' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Ensure full history is fetched for rebase

      # ... (rest of your existing steps: Set up Terraform, Configure AWS, Format, Init, Validate, Node.js, Install terraform-docs)

      - name: Generate Terraform Docs and Commit
        if: github.event_name == 'pull_request'
        run: |
          git config --local user.email "vnagaraj984@gmail.com"
          git config --local user.name "nag9844"
          
          terraform-docs .

          # Check if README.md has changed. If so, add and commit.
          # Use `git status --porcelain` to detect changes more reliably for auto-generated files
          if [ -n "$(git status --porcelain README.md)" ]; then
            echo "README.md changed, committing."
            git add README.md
            git commit -m "docs: Update README.md"
          else
            echo "README.md is up to date."
          fi

      - name: Terraform Plan and Commit
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          # Git user config is sticky per run, no need to set again here
          terraform plan -no-color -input=false > plan.txt
          
          # Check if plan.txt has changed. If so, add and commit.
          if [ -n "$(git status --porcelain plan.txt)" ]; then
            echo "plan.txt changed, committing."
            git add plan.txt
            git commit -m "chore: Update plan.txt"
          else
            echo "plan.txt is up to date."
          fi

      - name: Push generated changes
        if: github.event_name == 'pull_request'
        run: |
          echo "Checking Git status before pull/push:"
          git status
          echo "Listing untracked files (if any):"
          git clean -n -d # Shows what would be removed, but doesn't remove it

          # Ensure no lingering uncommitted/unstaged changes before pull/push
          # Force add and commit any last-minute untracked changes for robustness
          # This is a strong measure; use with caution.
          git add .
          if ! git diff --cached --quiet; then # Check if there are staged changes
            echo "Committing any remaining staged changes."
            git commit -m "chore: Final commit of generated files" || true # || true to prevent job failure if no changes
          fi
          
          # Now, check if there are any local commits to push
          # This ensures we don't try to pull/push if nothing was committed by this workflow
          if ! git diff --quiet origin/${{ github.head_ref }}; then
            echo "Local commits detected. Performing pull --rebase and push."
            # The git pull --rebase command needs to be robust
            git pull --rebase origin ${{ github.head_ref }} && \
            git push origin HEAD:${{ github.head_ref }}
          else
            echo "No new local commits to push from this workflow."
          fi
      
      - name: Update Pull Request Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN_OUTPUT: ${{ steps.plan.outputs.stdout }} # This will be empty, read from file instead
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let planContent = '';
            try {
              planContent = fs.readFileSync('plan.txt', 'utf8');
            } catch (error) {
              console.log('plan.txt not found, possibly no changes or plan failed.');
              planContent = 'No plan output available or plan failed to generate.';
            }

            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`hcl
            ${planContent}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false