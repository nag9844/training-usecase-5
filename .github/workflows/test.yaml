name: Terraform CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Use GitHub OIDC to authenticate with AWS
permissions:
  id-token: write
  contents: read           # Keep read at workflow level for other jobs/steps
  pull-requests: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    permissions:             # <--- This block is correct
      contents: write        # Grant write permission specifically for this job
      pull-requests: write   # Keep pull-requests write for commenting
      id-token: write        # Keep id-token write for AWS OIDC

    env:
      AWS_REGION: ${{ secrets.AWS_REGION || 'ap-south-1' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Ensure full history is fetched for rebase

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::199570228070:role/oidc-demo-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Setup Node.js
        if: github.event_name == 'pull_request'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install terraform-docs
        if: github.event_name == 'pull_request'
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      - name: Generate Terraform Docs and Commit
        if: github.event_name == 'pull_request'
        run: |
          git config --local user.email "vnagaraj984@gmail.com"
          git config --local user.name "nag9844"

          echo "--- Generating terraform-docs ---"
          # Direct terraform-docs to generate markdown to a temporary file
          terraform-docs markdown . > README.md.new
          # Overwrite the actual README.md only if generation was successful
          mv README.md.new README.md

          # Add README.md to staging area.
          if [ -f README.md ]; then
            git add README.md
            # Attempt to commit. If there are no changes staged, this will return a non-zero exit code.
            # The '|| true' ensures the step doesn't fail, but we'll check if a commit happened later.
            if git commit -m "docs: Update README.md"; then
              echo "Successfully committed README.md changes."
            else
              echo "No README.md changes to commit or commit failed. Continuing..."
              # Check if there are still unstaged changes that were not committed
              if ! git diff --quiet; then
                echo "WARNING: Uncommitted changes still exist after attempting to commit README.MD."
                git status
              fi
            fi
          else
            echo "WARNING: README.md was not generated by terraform-docs."
          fi

      - name: Terraform Plan and Commit
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          git config --local user.email "vnagaraj984@gmail.com"
          git config --local user.name "nag9844"

          echo "--- Generating terraform plan ---"
          # Direct terraform plan output to a temporary file
          terraform plan -no-color -input=false > plan.txt.new
          # Overwrite the actual plan.txt only if successful
          mv plan.txt.new plan.txt

          # Add plan.txt to staging area
          git add plan.txt

          # Attempt to commit.
          if git commit -m "chore: Update plan.txt"; then
            echo "Successfully committed plan.txt changes."
          else
            echo "No plan.txt changes to commit or commit failed. Continuing..."
            # Check if there are still unstaged changes that were not committed
            if ! git diff --quiet; then
              echo "WARNING: Uncommitted changes still exist after attempting to commit plan.txt."
              git status
            fi
          fi

      - name: Push generated changes and rebase
        if: github.event_name == 'pull_request'
        run: |
          BRANCH_NAME="${{ github.head_ref }}"

          echo "Current Git status before pull/push:"
          git status

          # Check if there are any pending changes (staged or unstaged)
          if ! git diff --quiet --exit-code HEAD; then
            echo "Detected local changes (staged or unstaged). This should not happen if previous commits were successful."
            echo "Attempting to add any remaining changes and commit them."
            git add .
            git commit -m "chore: Auto-commit remaining generated files (pre-rebase cleanup)" || true
          fi

          echo "Git status after potential final commit:"
          git status

          # Check if there are any new commits locally that aren't on the remote
          # This specifically looks for commits that were made by the workflow.
          if [ "$(git rev-list HEAD ^origin/$BRANCH_NAME --count)" -gt 0 ]; then
            echo "New local commits detected that need to be pushed."
            echo "Performing git pull --rebase origin $BRANCH_NAME..."
            # Perform rebase. If conflicts, it will fail.
            git pull --rebase origin "$BRANCH_NAME"
            echo "Rebase successful. Pushing changes..."
            # Push the rebased changes. Use --force-with-lease for safety on PR branches.
            git push origin HEAD:"$BRANCH_NAME" --force-with-lease
            echo "Push completed."
          else
            echo "No new commits from this workflow to push. Current branch is up to date."
          fi

      - name: Update Pull Request Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN_OUTPUT: ${{ steps.plan.outputs.stdout }} # This will be empty, read from file instead
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let planContent = '';
            try {
              planContent = fs.readFileSync('plan.txt', 'utf8');
            } catch (error) {
              console.log('plan.txt not found, possibly no changes or plan failed.');
              planContent = 'No plan output available or plan failed to generate.';
            }

            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`hcl
            ${planContent}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure' && github.event_name == 'pull_request' # Only fail PR if plan fails
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false