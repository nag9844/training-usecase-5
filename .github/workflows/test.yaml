name: Terraform CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Use GitHub OIDC to authenticate with AWS
permissions:
  id-token: write
  contents: read           # Keep read at workflow level for other jobs/steps
  pull-requests: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    permissions:             # <--- This block is correct
      contents: write        # Grant write permission specifically for this job
      pull-requests: write   # Keep pull-requests write for commenting
      id-token: write        # Keep id-token write for AWS OIDC

    env:
      AWS_REGION: ${{ secrets.AWS_REGION || 'ap-south-1' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Use GITHUB_TOKEN to allow pushing. fetch-depth: 0 is important for rebase.
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Ensure full history is fetched for rebase

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        # ... (rest of your Terraform setup)
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::199570228070:role/oidc-demo-role
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive
      
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: Setup Node.js
        if: github.event_name == 'pull_request'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install terraform-docs
        if: github.event_name == 'pull_request'
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/
      
      - name: Generate Terraform Docs and Commit
        if: github.event_name == 'pull_request'
        run: |
          terraform-docs .
          git config --local user.email "vnagaraj984@gmail.com"
          git config --local user.name "nag9844"
          git add README.md
          # Only commit if there are changes
          git diff --quiet --exit-code README.md || git commit -m "docs: Update README.md"
          
      - name: Terraform Plan and Commit
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          terraform plan -no-color -input=false > plan.txt
          git add plan.txt
          # Only commit if there are changes
          git diff --quiet --exit-code plan.txt || git commit -m "chore: Update plan.txt"
      
      - name: Push generated changes
        if: github.event_name == 'pull_request'
        run: |
          git pull --rebase origin ${{ github.head_ref }} # Pull changes from the PR branch
          git push origin HEAD:${{ github.head_ref }}     # Push the rebased changes
      
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN_OUTPUT: ${{ steps.plan.outputs.stdout }} # This will be empty, read from file instead
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let planContent = '';
            try {
              planContent = fs.readFileSync('plan.txt', 'utf8');
            } catch (error) {
              console.log('plan.txt not found, possibly no changes or plan failed.');
              planContent = 'No plan output available or plan failed to generate.';
            }

            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`hcl
            ${planContent}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false